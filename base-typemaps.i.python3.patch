diff --git a/common/base-typemaps.i b/common/base-typemaps.i
index 2ba0cb14b..7df56773e 100644
--- a/common/base-typemaps.i
+++ b/common/base-typemaps.i
@@ -220,6 +220,28 @@ typedef char gchar;
     }
 }
 
+%typemap(in) QofIdType {
+    if (PyUnicode_Check($input)) {
+      $1 = PyUnicode_AsUTF8($input);
+    } else if (PyBytes_Check($input)) {
+      $1 = PyBytes_AsString($input);
+    } else {
+      PyErr_SetString(PyExc_TypeError, "not a string or bytes object");
+      return NULL;
+    }
+}
+
+%typemap(in) QofIdTypeConst {
+    if (PyUnicode_Check($input)) {
+      $1 = PyUnicode_AsUTF8($input);
+    } else if (PyBytes_Check($input)) {
+      $1 = PyBytes_AsString($input);
+    } else {
+      PyErr_SetString(PyExc_TypeError, "not a string or bytes object");
+      return NULL;
+    }
+}
+
 %typemap(in) GSList *, QofQueryParamList * {
     $1 = NULL;
     /* Check if is a list */
@@ -228,6 +250,17 @@ typedef char gchar;
         int size = PyList_Size($input);
         for (i = size-1; i >= 0; i--) {
             PyObject *o = PyList_GetItem($input, i);
+%#if PY_VERSION_HEX>=0x03000000
+            if (PyUnicode_Check(o)) {
+                $1 = g_slist_prepend($1,PyUnicode_AsUTF8(PyList_GetItem($input, i)));
+            } else if (PyBytes_Check(o)) {
+                $1 = g_slist_prepend($1,PyBytes_AsString(PyList_GetItem($input, i)));
+            } else {
+                PyErr_SetString(PyExc_TypeError, "list must contain strings or bytes");
+                g_slist_free($1);
+                return NULL;
+            }
+%#else
             if (PyString_Check(o)) {
                 $1 = g_slist_prepend($1,PyString_AsString(PyList_GetItem($input, i)));
             } else {
@@ -235,6 +268,7 @@ typedef char gchar;
                 g_slist_free($1);
                 return NULL;
             }
+%#endif
         }
     } else {
         PyErr_SetString(PyExc_TypeError, "not a list");
